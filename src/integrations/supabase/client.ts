
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mgmnadmmslpyjtcygyna.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1nbW5hZG1tc2xweWp0Y3lneW5hIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4MDcxNzQsImV4cCI6MjA1OTM4MzE3NH0.2KvlXca1vjscVSk2qUuuAoFbogtIl4Yv8VXimWGS48s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage,
      detectSessionInUrl: false
    },
    global: {
      headers: {
        "Content-Type": "application/json",
        "Cache-Control": "no-cache"
      }
    },
    // Add a longer timeout to prevent quick timeouts and handle connection issues better
    realtime: {
      timeout: 60000,
      params: {
        transports: ['websocket', 'polling'] // Fallback to polling if WebSocket fails
      }
    }
  }
);

// Export a method to explicitly check connection
export const checkSupabaseConnection = async () => {
  try {
    // Instead of trying to access a non-existent table, 
    // let's use a table we know exists for the health check
    const { data, error } = await supabase.from('blocks').select('*').limit(1);
    return !error;
  } catch (err) {
    console.error("Supabase connection check failed:", err);
    return false;
  }
};
